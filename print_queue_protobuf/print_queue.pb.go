// Code generated by protoc-gen-go. DO NOT EDIT.
// source: print_queue.proto

package printservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Text struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Sender               string   `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Text) Reset()         { *m = Text{} }
func (m *Text) String() string { return proto.CompactTextString(m) }
func (*Text) ProtoMessage()    {}
func (*Text) Descriptor() ([]byte, []int) {
	return fileDescriptor_147c0b387af440da, []int{0}
}

func (m *Text) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Text.Unmarshal(m, b)
}
func (m *Text) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Text.Marshal(b, m, deterministic)
}
func (m *Text) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Text.Merge(m, src)
}
func (m *Text) XXX_Size() int {
	return xxx_messageInfo_Text.Size(m)
}
func (m *Text) XXX_DiscardUnknown() {
	xxx_messageInfo_Text.DiscardUnknown(m)
}

var xxx_messageInfo_Text proto.InternalMessageInfo

func (m *Text) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Text) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func init() {
	proto.RegisterType((*Text)(nil), "printservice.Text")
}

func init() {
	proto.RegisterFile("print_queue.proto", fileDescriptor_147c0b387af440da)
}

var fileDescriptor_147c0b387af440da = []byte{
	// 139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x28, 0xca, 0xcc,
	0x2b, 0x89, 0x2f, 0x2c, 0x4d, 0x2d, 0x4d, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x01,
	0x0b, 0x15, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x2a, 0x19, 0x71, 0xb1, 0x84, 0xa4, 0x56, 0x94,
	0x08, 0x09, 0x71, 0xb1, 0x94, 0xa4, 0x56, 0x94, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81,
	0xd9, 0x42, 0x62, 0x5c, 0x6c, 0xc5, 0xa9, 0x79, 0x29, 0xa9, 0x45, 0x12, 0x4c, 0x60, 0x51, 0x28,
	0xcf, 0xc8, 0x8d, 0x8b, 0x2f, 0xbd, 0xa8, 0x20, 0xd9, 0x39, 0xb1, 0x24, 0x18, 0x62, 0x8a, 0x90,
	0x09, 0x17, 0x8b, 0x73, 0x46, 0x62, 0x89, 0x90, 0x90, 0x1e, 0xb2, 0xe1, 0x7a, 0x20, 0x93, 0xa5,
	0xb0, 0x88, 0x29, 0x31, 0x68, 0x30, 0x1a, 0x30, 0x26, 0xb1, 0x81, 0x1d, 0x64, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0xc8, 0xda, 0xee, 0x74, 0xa5, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GrpcCatServiceClient is the client API for GrpcCatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GrpcCatServiceClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (GrpcCatService_ChatClient, error)
}

type grpcCatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcCatServiceClient(cc grpc.ClientConnInterface) GrpcCatServiceClient {
	return &grpcCatServiceClient{cc}
}

func (c *grpcCatServiceClient) Chat(ctx context.Context, opts ...grpc.CallOption) (GrpcCatService_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GrpcCatService_serviceDesc.Streams[0], "/printservice.grpcCatService/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcCatServiceChatClient{stream}
	return x, nil
}

type GrpcCatService_ChatClient interface {
	Send(*Text) error
	Recv() (*Text, error)
	grpc.ClientStream
}

type grpcCatServiceChatClient struct {
	grpc.ClientStream
}

func (x *grpcCatServiceChatClient) Send(m *Text) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcCatServiceChatClient) Recv() (*Text, error) {
	m := new(Text)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcCatServiceServer is the server API for GrpcCatService service.
type GrpcCatServiceServer interface {
	Chat(GrpcCatService_ChatServer) error
}

// UnimplementedGrpcCatServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGrpcCatServiceServer struct {
}

func (*UnimplementedGrpcCatServiceServer) Chat(srv GrpcCatService_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}

func RegisterGrpcCatServiceServer(s *grpc.Server, srv GrpcCatServiceServer) {
	s.RegisterService(&_GrpcCatService_serviceDesc, srv)
}

func _GrpcCatService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcCatServiceServer).Chat(&grpcCatServiceChatServer{stream})
}

type GrpcCatService_ChatServer interface {
	Send(*Text) error
	Recv() (*Text, error)
	grpc.ServerStream
}

type grpcCatServiceChatServer struct {
	grpc.ServerStream
}

func (x *grpcCatServiceChatServer) Send(m *Text) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcCatServiceChatServer) Recv() (*Text, error) {
	m := new(Text)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GrpcCatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "printservice.grpcCatService",
	HandlerType: (*GrpcCatServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _GrpcCatService_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "print_queue.proto",
}
